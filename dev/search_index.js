var documenterSearchIndex = {"docs":
[{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = Firefly","category":"page"},{"location":"index.html#Firefly.jl-1","page":"Home","title":"Firefly.jl","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"(Image: GitHub) (Image: Build Status) (Image: Coverage) (Image: License)","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"\"[like] fireflies next to spotlights\"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"A tool for characterizing directly-imaged expolanets in a Bayesian framework","category":"page"},{"location":"index.html#API/Reference-1","page":"Home","title":"API/Reference","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Modules = [Firefly]","category":"page"},{"location":"index.html#Firefly.PoissonInvariant","page":"Home","title":"Firefly.PoissonInvariant","text":"PoissonInvariant(a, b) <: ContinuousUnivariateDistribution\n\nA Poisson invariant distributions truncated from a to b.\n\nThis distribution is derived from the determinant of the Fisher information matrix\n\np(x) propto sqrtEleftleft(fracdlnLdx right)^2 right\n\nwhich gives p(x)propto 1sqrtx\n\nForm\n\np(x) = frac12(sqrtb - sqrta)sqrtxquadforallxin (ab)\n\nSupported Functions\n\nThese functions have been explicitly written for RadialUniform from Distributions.jl. There may be more functionality available from fallback methods, but the following are guaranteed to work.\n\npdf\nlogpdf\ncdf\nlogcdf\nquantile\nminimum\nmaximum\n\nExamples\n\njulia> using Distributions\n\njulia> dist = PoissonInvariant(0, 1)\nPoissonInvariant{Float64}(a=0.0, b=1.0)\n\njulia> pdf(dist, -1)\n0.0\n\njulia> pdf(dist, 3)\n0.0\n\njulia> cdf(dist, quantile(dist, 0.5))\n0.5\n\n\n\n\n\n","category":"type"},{"location":"index.html#Firefly.RadialUniform","page":"Home","title":"Firefly.RadialUniform","text":"RadialUniform(r_in, r_out) <: ContinuousUnivariateDistribution\n\nA radially uniform distribution from r_in to r_out.\n\nThis distribution is derived from the change of variables evaluation of \n\np(r theta) = p(x y)leftnabla_rtheta(x y) right\n\nwhich given p(x y)propto 1, leads to p(r theta)propto r\n\nForm\n\np(r) = frac2rr_textout^2 - r_textin^2quadforallrin (r_textin r_textout)\n\nSupported Functions\n\nThese functions have been explicitly written for RadialUniform from Distributions.jl. There may be more functionality available from fallback methods, but the following are guaranteed to work.\n\npdf\nlogpdf\ncdf\nlogcdf\nquantile\nminimum\nmaximum\n\nExamples\n\njulia> using Distributions\n\njulia> dist = RadialUniform(0, 10)\nRadialUniform{Float64}(r_in=0.0, r_out=10.0)\n\njulia> pdf(dist, -1)\n0.0\n\njulia> pdf(dist, 3)\n0.06\n\njulia> cdf(dist, quantile(dist, 0.5))\n0.5000000000000001\n\n\n\n\n\n","category":"type"},{"location":"index.html#Firefly.findpeak-Tuple{AbstractArray{T,1} where T}","page":"Home","title":"Firefly.findpeak","text":"findpeak(::AbstractVector)\nfindpeak(::Chains, [::Symbol])\n\nReturn a na誰ve maximum a posteriori (MAP) estimate from a chain.\n\nThis uses kernel density estimation (KDE) to estimate the continuous posterior distribution from the input chain and simply returns its max argument. This is na誰ve because we should not consider KDE peaks to be true \"modes\" or MAP estimates. Estimating accurate modes of a posterior sample is still an active area of statistical research.\n\nExamples\n\njulia> samples = randn(1000);\n\njulia> findpeak(samples)\n-0.15763422104075167\n\n\n\n\n\n","category":"method"},{"location":"index.html#Firefly.findpeaks-Tuple{AbstractArray{T,1} where T}","page":"Home","title":"Firefly.findpeaks","text":"findpeaks(::AbstractVector, [n])\nfindpeaks(::Chains, [::Symbol], [n])\n\nReturn the first n na誰ve maximum a posteriori (MAP) estimates from a chain.\n\nThis uses kernel density estimation (KDE) to estimate the continuous posterior distribution from the input sample and finds maxima via the finite-difference estimation of the derivative. This is na誰ve because we should not consider KDE peaks to be true \"modes\" or MAP estimates. Estimating accurate modes of a posterior sample is still an active area of statistical research.\n\nExamples\n\njulia> samples = randn(1000) .+ (randn(1000) .+ 10);\n\njulia> findpeaks(samples, 2)\n2-element Array{Float64,1}:\n  9.82386893916195 \n 14.595\n\n\n\n\n\n","category":"method"},{"location":"index.html#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"This package is licensed under the MIT Expat license. See LICENSE for more information.","category":"page"}]
}
